name: Ollama Model Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      model_name:
        description: 'Name for the final model'
        default: 'mistral-custom'
        required: true
      base_model:
        description: 'Base model to fine-tune'
        default: 'mistralai/Mistral-7B-v0-1'
        required: true
      instance_type:
        description: 'SageMaker instance type'
        default: 'ml.g4dn.xlarge'
        required: false

jobs:
  train-convert-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-2' }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create Training Scripts Directory
        run: |
          mkdir -p ./scripts/training_scripts
          
          # Create train.py script with improved file handling
          cat > ./scripts/training_scripts/train.py << 'EOF'
          #!/usr/bin/env python3
          import os
          import glob
          import argparse
          import torch
          from transformers import (
              AutoModelForCausalLM,
              AutoTokenizer,
              Trainer,
              TrainingArguments,
              default_data_collator,
          )
          from datasets import load_dataset
          from peft import LoraConfig, get_peft_model

          def parse_args():
              """Parse command line arguments passed by SageMaker."""
              parser = argparse.ArgumentParser(description="Fine-tune a model with LoRA")
              parser.add_argument("--model_name_or_path", type=str, help="Base model to fine-tune")
              parser.add_argument("--output_dir", type=str, help="Output directory")
              parser.add_argument("--per_device_train_batch_size", type=int, default=1)
              parser.add_argument("--gradient_accumulation_steps", type=int, default=4)
              parser.add_argument("--learning_rate", type=float, default=2e-5)
              parser.add_argument("--num_train_epochs", type=int, default=3)
              parser.add_argument("--fp16", type=str, default="True")
              parser.add_argument("--save_strategy", type=str, default="steps")
              parser.add_argument("--save_steps", type=int, default=500)
              return parser.parse_args()

          def find_jsonl_files():
              """Find training data files in SageMaker environment."""
              # List all directories under /opt/ml/input/data to debug
              base_dir = "/opt/ml/input/data"
              print(f"Searching for training data files in: {base_dir}")
              
              all_dirs = os.listdir(base_dir)
              print(f"Found directories: {all_dirs}")
              
              jsonl_files = []
              
              # Search through all directories for JSONL files
              for directory in all_dirs:
                  full_path = os.path.join(base_dir, directory)
                  if os.path.isdir(full_path):
                      print(f"Checking directory: {full_path}")
                      # List all files in this directory
                      files = os.listdir(full_path)
                      print(f"Files in {full_path}: {files}")
                      
                      # Find JSON/JSONL files
                      for file in files:
                          if file.endswith('.jsonl') or file.endswith('.json'):
                              file_path = os.path.join(full_path, file)
                              jsonl_files.append(file_path)
                              print(f"Found JSON/JSONL file: {file_path}")
              
              if not jsonl_files:
                  # If we can't find direct JSON/JSONL files, try a recursive search
                  print("No direct JSON/JSONL files found. Trying recursive search...")
                  for root, dirs, files in os.walk(base_dir):
                      for file in files:
                          if file.endswith('.jsonl') or file.endswith('.json'):
                              file_path = os.path.join(root, file)
                              jsonl_files.append(file_path)
                              print(f"Found JSON/JSONL file: {file_path}")
              
              if not jsonl_files:
                  # Last resort - dump the contents of all files for debugging
                  print("Still no JSON/JSONL files found. Showing all files:")
                  for root, dirs, files in os.walk(base_dir):
                      for file in files:
                          file_path = os.path.join(root, file)
                          print(f"File: {file_path}")
                          # Check if it's a small text file we can print
                          if os.path.getsize(file_path) < 10000:
                              try:
                                  with open(file_path, 'r') as f:
                                      content = f.read(1000)  # Just read the first 1000 chars
                                      print(f"Content preview: {content}")
                              except:
                                  pass
                  
                  raise FileNotFoundError(f"No JSON or JSONL files found in {base_dir}")
              
              return jsonl_files

          def main():
              # Parse command line arguments
              args = parse_args()
              
              print(f"Using model: {args.model_name_or_path}")
              
              # Find and load training data
              try:
                  jsonl_files = find_jsonl_files()
                  print(f"Loading dataset from {len(jsonl_files)} files: {jsonl_files}")
                  
                  train_dataset = load_dataset("json", data_files=jsonl_files, split="train")
                  print(f"Dataset loaded with {len(train_dataset)} examples")
                  
                  # Print a sample from the dataset
                  if len(train_dataset) > 0:
                      print(f"Dataset sample: {train_dataset[0]}")
              except Exception as e:
                  print(f"Error loading training data: {str(e)}")
                  raise
              
              # Load model and tokenizer
              try:
                  print(f"Loading model from {args.model_name_or_path}")
                  model = AutoModelForCausalLM.from_pretrained(
                      args.model_name_or_path, 
                      torch_dtype=torch.bfloat16
                  )
                  tokenizer = AutoTokenizer.from_pretrained(args.model_name_or_path)
              except Exception as e:
                  print(f"Error loading model: {str(e)}")
                  raise
              
              # Apply LoRA configuration
              lora_config = LoraConfig(
                  r=8,
                  lora_alpha=16,
                  target_modules=["q_proj", "k_proj", "v_proj", "o_proj"],
                  lora_dropout=0.05,
                  bias="none",
                  task_type="CAUSAL_LM"
              )
              model = get_peft_model(model, lora_config)
              model.print_trainable_parameters()
              
              # Convert fp16 string argument to boolean
              fp16_value = args.fp16.lower() == "true"
              
              # Training arguments
              training_args = TrainingArguments(
                  output_dir=args.output_dir,
                  per_device_train_batch_size=args.per_device_train_batch_size,
                  gradient_accumulation_steps=args.gradient_accumulation_steps,
                  learning_rate=args.learning_rate,
                  num_train_epochs=args.num_train_epochs,
                  fp16=fp16_value,
                  save_strategy=args.save_strategy,
                  save_steps=args.save_steps,
              )
              
              # Initialize trainer
              trainer = Trainer(
                  model=model,
                  args=training_args,
                  train_dataset=train_dataset,
                  data_collator=default_data_collator,
              )
              
              # Train model
              trainer.train()
              
              # Save trained model and tokenizer
              model.save_pretrained(args.output_dir)
              tokenizer.save_pretrained(args.output_dir)
              print(f"Model saved to {args.output_dir}")

          if __name__ == "__main__":
              main()
          EOF
          
          # Create requirements.txt
          cat > ./scripts/training_scripts/requirements.txt << 'EOF'
          transformers>=4.49.0
          accelerate>=0.30.0
          peft>=0.9.0
          bitsandbytes>=0.43.0
          trl>=0.7.11
          datasets>=2.19.0
          torch==2.5.1
          EOF

      - name: Construct S3 URI and Fine-tune Model
        id: finetune
        env:
          SAGEMAKER_ROLE_ARN: ${{ secrets.AWS_SAGEMAKER_ROLE_ARN }}
          TRAINING_INSTANCE_TYPE: ${{ github.event.inputs.instance_type || 'ml.g4dn.xlarge' }}
          S3_BUCKET_NAME: "ollama-lora-pipeline"
        run: |
          # Use the exact path to the training data folder, not a specific file
          TRAINING_DATA_URI="s3://${S3_BUCKET_NAME}/training-data/"
          echo "Using training data from: $TRAINING_DATA_URI"
          echo "Using instance type: $TRAINING_INSTANCE_TYPE"
          
          # Run the SageMaker fine-tuning script
          python sagemaker_finetune.py \
            --base-model "${{ github.event.inputs.base_model || 'mistralai/Mistral-7B-v0-1' }}" \
            --training-data "$TRAINING_DATA_URI" \
            --output-bucket "${S3_BUCKET_NAME}" \
            --instance-type "$TRAINING_INSTANCE_TYPE"
          
          # Get the training job name
          JOB_NAME=$(aws sagemaker list-training-jobs --sort-by "CreationTime" --sort-order "Descending" --max-items 1 --query "TrainingJobSummaries[0].TrainingJobName" --output text)
          echo "TRAINING_JOB_NAME=${JOB_NAME}" >> $GITHUB_ENV

      - name: Download Fine-tuned Model
        run: |
          python scripts/download_model.py --job-name $TRAINING_JOB_NAME --output-dir ./fine-tuned-model

      - name: Merge LoRA Weights
        run: |
          python scripts/merge_lora.py --base-model "${{ github.event.inputs.base_model || 'mistralai/Mistral-7B-v0-1' }}" --lora-model ./fine-tuned-model --output-dir ./merged-model

      - name: Convert to GGUF Format
        run: |
          mkdir -p ./models
          python scripts/convert_to_gguf.py --input-dir ./merged-model --output-file ./models/${{ github.event.inputs.model_name || 'mistral-custom' }}.gguf --outtype q4_k_m

      - name: Create Ollama Modelfile
        run: |
          python scripts/create_modelfile.py --gguf-path ./models/${{ github.event.inputs.model_name || 'mistral-custom' }}.gguf --model-name ${{ github.event.inputs.model_name || 'mistral-custom' }}

      - name: Evaluate Model
        id: evaluate
        run: |
          python scripts/evaluate_model.py --model-dir ./merged-model --output-file ./evaluation_results.json
          echo "eval_file=evaluation_results.json" >> $GITHUB_OUTPUT

      - name: Upload to S3
        env:
          S3_BUCKET_NAME: "ollama-lora-pipeline"
        run: |
          MODEL_NAME=${{ github.event.inputs.model_name || 'mistral-custom' }}
          
          # Create timestamp for versioning
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          
          # Create directories in S3 if they don't exist
          aws s3api put-object --bucket $S3_BUCKET_NAME --key models/${MODEL_NAME}/${TIMESTAMP}/
          aws s3api put-object --bucket $S3_BUCKET_NAME --key models/${MODEL_NAME}/latest/
          
          # Upload GGUF model
          aws s3 cp ./models/${MODEL_NAME}.gguf s3://${S3_BUCKET_NAME}/models/${MODEL_NAME}/${TIMESTAMP}/${MODEL_NAME}.gguf
          
          # Upload Modelfile
          aws s3 cp ./Modelfile s3://${S3_BUCKET_NAME}/models/${MODEL_NAME}/${TIMESTAMP}/Modelfile
          
          # Upload evaluation results
          aws s3 cp ./evaluation_results.json s3://${S3_BUCKET_NAME}/models/${MODEL_NAME}/${TIMESTAMP}/evaluation_results.json
          
          # Update "latest" pointer
          aws s3 cp ./models/${MODEL_NAME}.gguf s3://${S3_BUCKET_NAME}/models/${MODEL_NAME}/latest/${MODEL_NAME}.gguf
          aws s3 cp ./Modelfile s3://${S3_BUCKET_NAME}/models/${MODEL_NAME}/latest/Modelfile
          aws s3 cp ./evaluation_results.json s3://${S3_BUCKET_NAME}/models/${MODEL_NAME}/latest/evaluation_results.json
          
          echo "Model artifacts uploaded to: s3://${S3_BUCKET_NAME}/models/${MODEL_NAME}/${TIMESTAMP}/"
          echo "Latest model available at: s3://${S3_BUCKET_NAME}/models/${MODEL_NAME}/latest/"

      - name: Generate Report
        run: |
          python scripts/generate_report.py --eval-file ./evaluation_results.json --output-file ./report.md

      - name: Upload Evaluation Results
        uses: actions/upload-artifact@v4
        with:
          name: model-evaluation
          path: |
            ./evaluation_results.json
            ./report.md

      - name: Add Evaluation Summary Comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reportContent = fs.readFileSync('./report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reportContent
            });