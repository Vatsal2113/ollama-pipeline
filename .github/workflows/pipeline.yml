name: Ollama Model Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      model_name:
        description: 'Name for the final model'
        default: 'mistral-custom'
        required: true
      base_model:
        description: 'Base model to fine-tune'
        default: 'mistralai/Mistral-7B-v0-1'
        required: true
      training_data:
        description: 'Path to training data in S3'
        default: 'data/train.jsonl'
        required: true

jobs:
  train-convert-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Fine-tune Model with SageMaker
        id: finetune
        run: |
          # Properly quoted arguments to ensure values are passed correctly
          python sagemaker_finetune.py \
            --base-model "${{ github.event.inputs.base_model || 'mistralai/Mistral-7B-v0-1' }}" \
            --training-data "${{ github.event.inputs.training_data || 'data/train.jsonl' }}" \
            --output-bucket "${{ secrets.S3_BUCKET_NAME }}"
          
          # Get the training job name
          JOB_NAME=$(aws sagemaker list-training-jobs --sort-by "CreationTime" --sort-order "Descending" --max-items 1 --query "TrainingJobSummaries[0].TrainingJobName" --output text)
          echo "TRAINING_JOB_NAME=${JOB_NAME}" >> $GITHUB_ENV

      - name: Download Fine-tuned Model
        run: |
          python scripts/download_model.py --job-name $TRAINING_JOB_NAME --output-dir ./fine-tuned-model

      - name: Merge LoRA Weights
        run: |
          python scripts/merge_lora.py --base-model "${{ github.event.inputs.base_model || 'mistralai/Mistral-7B-v0-1' }}" --lora-model ./fine-tuned-model --output-dir ./merged-model

      - name: Convert to GGUF Format
        run: |
          mkdir -p ./models
          python scripts/convert_to_gguf.py --input-dir ./merged-model --output-file ./models/${{ github.event.inputs.model_name || 'mistral-custom' }}.gguf --outtype q4_k_m

      - name: Create Ollama Modelfile
        run: |
          python scripts/create_modelfile.py --gguf-path ./models/${{ github.event.inputs.model_name || 'mistral-custom' }}.gguf --model-name ${{ github.event.inputs.model_name || 'mistral-custom' }}

      - name: Evaluate Model
        id: evaluate
        run: |
          python scripts/evaluate_model.py --model-dir ./merged-model --output-file ./evaluation_results.json
          echo "eval_file=evaluation_results.json" >> $GITHUB_OUTPUT

      - name: Upload to S3
        run: |
          MODEL_NAME=${{ github.event.inputs.model_name || 'mistral-custom' }}
          BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"
          
          # Create timestamp for versioning
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          
          # Create directories in S3 if they don't exist
          aws s3api put-object --bucket $BUCKET_NAME --key models/${MODEL_NAME}/${TIMESTAMP}/
          aws s3api put-object --bucket $BUCKET_NAME --key models/${MODEL_NAME}/latest/
          
          # Upload GGUF model
          aws s3 cp ./models/${MODEL_NAME}.gguf s3://${BUCKET_NAME}/models/${MODEL_NAME}/${TIMESTAMP}/${MODEL_NAME}.gguf
          
          # Upload Modelfile
          aws s3 cp ./Modelfile s3://${BUCKET_NAME}/models/${MODEL_NAME}/${TIMESTAMP}/Modelfile
          
          # Upload evaluation results
          aws s3 cp ./evaluation_results.json s3://${BUCKET_NAME}/models/${MODEL_NAME}/${TIMESTAMP}/evaluation_results.json
          
          # Update "latest" pointer
          aws s3 cp ./models/${MODEL_NAME}.gguf s3://${BUCKET_NAME}/models/${MODEL_NAME}/latest/${MODEL_NAME}.gguf
          aws s3 cp ./Modelfile s3://${BUCKET_NAME}/models/${MODEL_NAME}/latest/Modelfile
          aws s3 cp ./evaluation_results.json s3://${BUCKET_NAME}/models/${MODEL_NAME}/latest/evaluation_results.json
          
          echo "Model artifacts uploaded to: s3://${BUCKET_NAME}/models/${MODEL_NAME}/${TIMESTAMP}/"
          echo "Latest model available at: s3://${BUCKET_NAME}/models/${MODEL_NAME}/latest/"

      - name: Generate Report
        run: |
          python scripts/generate_report.py --eval-file ./evaluation_results.json --output-file ./report.md

      - name: Upload Evaluation Results
        uses: actions/upload-artifact@v4
        with:
          name: model-evaluation
          path: |
            ./evaluation_results.json
            ./report.md

      - name: Add Evaluation Summary Comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reportContent = fs.readFileSync('./report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reportContent
            });