name: Ollama Model Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      model_name:
        description: 'Name for the final model'
        default: 'gpt2-custom'
        required: true
      base_model:
        description: 'Base model to fine-tune'
        default: 'distilgpt2'
        required: true
      instance_type:
        description: 'SageMaker instance type'
        default: 'ml.g4dn.xlarge'
        required: false

jobs:
  train-convert-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-2' }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 sagemaker huggingface-hub torch

      - name: Create Training Scripts
        run: |
          mkdir -p ./scripts/training_scripts/lora_trainer
          
          # Create a training script that can handle existing JSONL files
          cat > ./scripts/training_scripts/lora_trainer/train_lora.py << 'EOF'
          #!/usr/bin/env python3

          import os
          import argparse
          import logging
          import sys
          import traceback
          import glob
          import torch

          logging.basicConfig(
              level=logging.INFO,
              format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
              handlers=[logging.StreamHandler(sys.stdout)]
          )
          logger = logging.getLogger(__name__)

          def find_training_files():
              """Find training data files in SageMaker paths."""
              base_dir = "/opt/ml/input/data/training"
              logger.info(f"Looking for training data in: {base_dir}")
              
              # Look for JSONL files in the training directory
              jsonl_files = glob.glob(os.path.join(base_dir, "**", "*.jsonl"), recursive=True)
              
              if jsonl_files:
                  logger.info(f"Found {len(jsonl_files)} JSONL files: {jsonl_files}")
                  return jsonl_files
              else:
                  logger.warning("No JSONL files found in the training directory.")
                  # Create a fallback sample file if no files found
                  sample_path = os.path.join(base_dir, "fallback_sample.jsonl")
                  with open(sample_path, "w") as f:
                      f.write('{"text": "This is a fallback sample text for training."}\n')
                  logger.info(f"Created fallback sample file: {sample_path}")
                  return [sample_path]

          def main():
              try:
                  # Print environment information first
                  logger.info(f"Python version: {sys.version}")
                  logger.info(f"PyTorch version: {torch.__version__}")
                  
                  # Import libraries after logging versions
                  from transformers import (
                      AutoModelForCausalLM,
                      AutoTokenizer,
                      Trainer,
                      TrainingArguments,
                      DataCollatorForLanguageModeling
                  )
                  
                  # Parse arguments
                  parser = argparse.ArgumentParser(description="Train a language model")
                  parser.add_argument("--model_name_or_path", type=str, default="distilgpt2")
                  parser.add_argument("--output_dir", type=str, default="/opt/ml/model")
                  parser.add_argument("--per_device_train_batch_size", type=int, default=1)
                  parser.add_argument("--gradient_accumulation_steps", type=int, default=4)
                  parser.add_argument("--learning_rate", type=float, default=2e-4)
                  parser.add_argument("--num_train_epochs", type=int, default=1)
                  parser.add_argument("--use_lora", type=str, default='False')
                  parser.add_argument("--lora_r", type=int, default=8)
                  parser.add_argument("--lora_alpha", type=int, default=16)
                  parser.add_argument("--lora_dropout", type=float, default=0.05)
                  
                  args = parser.parse_args()
                  
                  # Log all arguments
                  logger.info(f"Arguments: {args}")
                  
                  # Find training files
                  training_files = find_training_files()
                  logger.info(f"Using training files: {training_files}")
                  
                  # Use the model specified in arguments
                  model_name = args.model_name_or_path
                  
                  # Load tokenizer
                  logger.info(f"Loading tokenizer: {model_name}")
                  tokenizer = AutoTokenizer.from_pretrained(model_name)
                  if tokenizer.pad_token is None:
                      tokenizer.pad_token = tokenizer.eos_token
                  
                  # Custom dataset implementation to avoid PyArrow issues
                  from torch.utils.data import Dataset
                  
                  class JsonlDataset(Dataset):
                      def __init__(self, file_paths, tokenizer, max_length=64):
                          self.examples = []
                          
                          for file_path in file_paths:
                              logger.info(f"Loading data from {file_path}")
                              try:
                                  with open(file_path, 'r') as f:
                                      for line in f:
                                          try:
                                              # Handle different JSONL formats
                                              import json
                                              data = json.loads(line.strip())
                                              # Check if 'text' field exists, if not try to find text content
                                              if 'text' in data:
                                                  text = data['text']
                                              elif 'content' in data:
                                                  text = data['content']
                                              else:
                                                  # Use the first string field we find
                                                  for key, value in data.items():
                                                      if isinstance(value, str) and len(value) > 10:
                                                          text = value
                                                          break
                                                  else:
                                                      continue  # Skip this example if no suitable text found
                                              
                                              encodings = tokenizer(text, truncation=True, max_length=max_length, padding="max_length")
                                              example = {key: torch.tensor(val) for key, val in encodings.items()}
                                              self.examples.append(example)
                                          except Exception as e:
                                              logger.warning(f"Error processing line: {e}")
                                              continue
                              except Exception as e:
                                  logger.error(f"Error loading file {file_path}: {e}")
                          
                          logger.info(f"Loaded {len(self.examples)} examples from {len(file_paths)} files")
                          
                          if not self.examples:
                              logger.warning("No examples loaded, creating one dummy example")
                              dummy_text = "This is a dummy example because no valid data was found."
                              encodings = tokenizer(dummy_text, truncation=True, max_length=max_length, padding="max_length")
                              example = {key: torch.tensor(val) for key, val in encodings.items()}
                              self.examples.append(example)
                      
                      def __len__(self):
                          return len(self.examples)
                      
                      def __getitem__(self, idx):
                          return self.examples[idx]
                  
                  # Load dataset
                  train_dataset = JsonlDataset(training_files, tokenizer)
                  logger.info(f"Dataset loaded with {len(train_dataset)} examples")
                  
                  # Load model
                  logger.info(f"Loading model: {model_name}")
                  model = AutoModelForCausalLM.from_pretrained(model_name)
                  logger.info(f"Model loaded successfully")
                  
                  # Set up data collator
                  data_collator = DataCollatorForLanguageModeling(
                      tokenizer=tokenizer, 
                      mlm=False
                  )
                  
                  # Training arguments - simplified
                  training_args = TrainingArguments(
                      output_dir=args.output_dir,
                      per_device_train_batch_size=args.per_device_train_batch_size,
                      gradient_accumulation_steps=args.gradient_accumulation_steps,
                      learning_rate=args.learning_rate,
                      num_train_epochs=args.num_train_epochs,
                      save_strategy="no",  # Don't save intermediate checkpoints
                      logging_steps=1,
                      remove_unused_columns=False
                  )
                  
                  # Initialize trainer
                  trainer = Trainer(
                      model=model,
                      args=training_args,
                      train_dataset=train_dataset,
                      data_collator=data_collator,
                      tokenizer=tokenizer
                  )
                  
                  # Train model
                  logger.info("Starting training...")
                  trainer.train()
                  logger.info("Training completed successfully!")
                  
                  # Save model
                  logger.info(f"Saving model to {args.output_dir}")
                  model.save_pretrained(args.output_dir)
                  tokenizer.save_pretrained(args.output_dir)
                  logger.info(f"Model saved successfully")
                  
              except Exception as e:
                  logger.error(f"Unhandled error: {str(e)}")
                  logger.error(traceback.format_exc())
                  sys.exit(1)

          if __name__ == "__main__":
              main()
          EOF
          
          # Create requirements.txt file with Python 3.11 compatible versions
          cat > ./scripts/training_scripts/lora_trainer/requirements.txt << 'EOF'
          transformers==4.36.0
          torch>=2.0.0
          accelerate>=0.20.0
          EOF

      - name: Create SageMaker Fine-tuning Script
        run: |
          cat > sagemaker_finetune.py << 'EOF'
          #!/usr/bin/env python3
          import os
          import argparse
          import logging
          import boto3
          import sagemaker
          import time
          import string
          import random
          from sagemaker.huggingface import HuggingFace

          # Configure logging
          logging.basicConfig(
              level=logging.INFO,
              format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
          )
          logger = logging.getLogger("sagemaker_finetune")

          def setup_args():
              """Parse command line arguments."""
              parser = argparse.ArgumentParser(description="Fine-tune a model with SageMaker")
              
              parser.add_argument(
                  "--base-model",
                  required=True,
                  help="Base model to fine-tune"
              )
              
              parser.add_argument(
                  "--training-data",
                  required=True,
                  help="S3 URI of training data"
              )
              
              parser.add_argument(
                  "--output-bucket",
                  required=True,
                  help="S3 bucket for output model"
              )
              
              parser.add_argument(
                  "--instance-type",
                  default="ml.g4dn.xlarge",
                  help="SageMaker training instance type"
              )
              
              return parser.parse_args()

          def main():
              args = setup_args()
              try:
                  logger.info(f"Setting up SageMaker finetuning for {args.base_model}")
                  
                  # Set up SageMaker session
                  sagemaker_session = sagemaker.Session()
                  role = os.environ.get("SAGEMAKER_ROLE_ARN")
                  logger.info(f"Using role: {role}")
                  
                  # Define hyperparameters for fine-tuning
                  hyperparameters = {
                      'model_name_or_path': args.base_model,
                      'output_dir': '/opt/ml/model',
                      'per_device_train_batch_size': 1,
                      'gradient_accumulation_steps': 4,
                      'learning_rate': 2e-4,
                      'num_train_epochs': 1,
                      'use_lora': 'False'  # Disabled for now
                  }
                  
                  # Generate a simple job name
                  suffix = ''.join(random.choices(string.ascii_lowercase + string.digits, k=5))
                  job_name = f"train-{suffix}"
                  
                  # Use Hugging Face estimator with versions supporting Python 3.11
                  huggingface_estimator = HuggingFace(
                      entry_point='train_lora.py',
                      source_dir='./scripts/training_scripts/lora_trainer',
                      instance_type=args.instance_type,
                      instance_count=1,
                      role=role,
                      transformers_version='4.49.0',
                      pytorch_version='2.5.1',
                      py_version='py311',
                      hyperparameters=hyperparameters,
                      debugger_hook_config=False
                  )
                  
                  # Create training job inputs
                  inputs = {'training': args.training_data}
                  
                  # Start the training job
                  logger.info(f"Starting training job: {job_name}")
                  huggingface_estimator.fit(inputs=inputs, job_name=job_name)
                  logger.info(f"Training job {job_name} completed")
                  
                  # Get the model artifacts
                  model_data = huggingface_estimator.model_data
                  logger.info(f"Model artifacts: {model_data}")
                  
              except Exception as e:
                  logger.error(f"Error during fine-tuning: {str(e)}")
                  exit(1)

          if __name__ == "__main__":
              main()
          EOF
          chmod +x sagemaker_finetune.py

      - name: Construct S3 URI and Fine-tune Model
        id: finetune
        env:
          SAGEMAKER_ROLE_ARN: ${{ secrets.AWS_SAGEMAKER_ROLE_ARN }}
          TRAINING_INSTANCE_TYPE: ${{ github.event.inputs.instance_type || 'ml.g4dn.xlarge' }}
          S3_BUCKET_NAME: "ollama-lora-pipeline"
          DATASET_BUCKET_NAME: "ollama-lora-pipeline"  # You can change this to your dataset bucket
        run: |
          # Use the dataset bucket for training data
          TRAINING_DATA_URI="s3://${DATASET_BUCKET_NAME}/training-data/"
          echo "Using training data from: $TRAINING_DATA_URI"
          echo "Using instance type: $TRAINING_INSTANCE_TYPE"
          
          # Run the SageMaker fine-tuning script
          python sagemaker_finetune.py \
            --base-model "${{ github.event.inputs.base_model || 'distilgpt2' }}" \
            --training-data "$TRAINING_DATA_URI" \
            --output-bucket "${S3_BUCKET_NAME}" \
            --instance-type "$TRAINING_INSTANCE_TYPE"
          
          # Get the training job name
          JOB_NAME=$(aws sagemaker list-training-jobs --sort-by "CreationTime" --sort-order "Descending" --max-items 1 --query "TrainingJobSummaries[0].TrainingJobName" --output text)
          echo "TRAINING_JOB_NAME=${JOB_NAME}" >> $GITHUB_ENV

      - name: Download Fine-tuned Model
        run: |
          python scripts/download_model.py --job-name $TRAINING_JOB_NAME --output-dir ./fine-tuned-model

      - name: Merge LoRA Weights (if applicable)
        run: |
          # For now, this is a simple copy operation since we're not using LoRA
          mkdir -p ./merged-model
          cp -r ./fine-tuned-model/* ./merged-model/
          echo "Copied model (no LoRA merge needed for full fine-tuning)"

      - name: Convert to GGUF Format
        run: |
          mkdir -p ./models
          python scripts/convert_to_gguf.py --input-dir ./merged-model --output-file ./models/${{ github.event.inputs.model_name || 'gpt2-custom' }}.gguf --outtype q4_k_m

      - name: Create Ollama Modelfile
        run: |
          python scripts/create_modelfile.py --gguf-path ./models/${{ github.event.inputs.model_name || 'gpt2-custom' }}.gguf --model-name ${{ github.event.inputs.model_name || 'gpt2-custom' }}

      - name: Evaluate Model
        id: evaluate
        run: |
          python scripts/evaluate_model.py --model-dir ./merged-model --output-file ./evaluation_results.json
          echo "eval_file=evaluation_results.json" >> $GITHUB_OUTPUT

      - name: Upload to S3
        env:
          S3_BUCKET_NAME: "ollama-lora-pipeline"
        run: |
          MODEL_NAME=${{ github.event.inputs.model_name || 'gpt2-custom' }}
          
          # Create timestamp for versioning
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          
          # Create directories in S3 if they don't exist
          aws s3api put-object --bucket $S3_BUCKET_NAME --key models/${MODEL_NAME}/${TIMESTAMP}/
          aws s3api put-object --bucket $S3_BUCKET_NAME --key models/${MODEL_NAME}/latest/
          
          # Upload GGUF model
          aws s3 cp ./models/${MODEL_NAME}.gguf s3://${S3_BUCKET_NAME}/models/${MODEL_NAME}/${TIMESTAMP}/${MODEL_NAME}.gguf
          
          # Upload Modelfile
          aws s3 cp ./Modelfile s3://${S3_BUCKET_NAME}/models/${MODEL_NAME}/${TIMESTAMP}/Modelfile
          
          # Upload evaluation results
          aws s3 cp ./evaluation_results.json s3://${S3_BUCKET_NAME}/models/${MODEL_NAME}/${TIMESTAMP}/evaluation_results.json
          
          # Update "latest" pointer
          aws s3 cp ./models/${MODEL_NAME}.gguf s3://${S3_BUCKET_NAME}/models/${MODEL_NAME}/latest/${MODEL_NAME}.gguf
          aws s3 cp ./Modelfile s3://${S3_BUCKET_NAME}/models/${MODEL_NAME}/latest/Modelfile
          aws s3 cp ./evaluation_results.json s3://${S3_BUCKET_NAME}/models/${MODEL_NAME}/latest/evaluation_results.json
          
          echo "Model artifacts uploaded to: s3://${S3_BUCKET_NAME}/models/${MODEL_NAME}/${TIMESTAMP}/"
          echo "Latest model available at: s3://${S3_BUCKET_NAME}/models/${MODEL_NAME}/latest/"

      - name: Generate Report
        run: |
          python scripts/generate_report.py --eval-file ./evaluation_results.json --output-file ./report.md

      - name: Upload Evaluation Results
        uses: actions/upload-artifact@v4
        with:
          name: model-evaluation
          path: |
            ./evaluation_results.json
            ./report.md

      - name: Add Evaluation Summary Comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reportContent = fs.readFileSync('./report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reportContent
            });